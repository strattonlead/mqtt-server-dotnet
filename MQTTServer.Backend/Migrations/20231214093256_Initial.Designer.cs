// <auto-generated />
using System;
using MQTTServer.Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MQTTServer.Backend.Migrations
{
    [DbContext(typeof(MqttDbContext))]
    [Migration("20231214093256_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MQTTServer.Backend.Entities.PublishTopicEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Topic");

                    b.HasIndex("UserId");

                    b.ToTable("PublishTopics");
                });

            modelBuilder.Entity("MQTTServer.Backend.Entities.SubscribeTopicEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Topic");

                    b.HasIndex("UserId");

                    b.ToTable("SubscribeTopics");
                });

            modelBuilder.Entity("MQTTServer.Backend.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MqttUsers");
                });

            modelBuilder.Entity("MQTTServer.Backend.Entities.PublishTopicEntity", b =>
                {
                    b.HasOne("MQTTServer.Backend.Entities.UserEntity", "User")
                        .WithMany("PublishTopics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MQTTServer.Backend.Entities.SubscribeTopicEntity", b =>
                {
                    b.HasOne("MQTTServer.Backend.Entities.UserEntity", "User")
                        .WithMany("SubscribeTopics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MQTTServer.Backend.Entities.UserEntity", b =>
                {
                    b.Navigation("PublishTopics");

                    b.Navigation("SubscribeTopics");
                });
#pragma warning restore 612, 618
        }
    }
}
