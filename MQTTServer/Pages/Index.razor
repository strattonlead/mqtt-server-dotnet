@page "/"
@using MQTTnet
@using MQTTnet.Server
@using PubSubServer.Client
@using PubSubServer.Redis

<PageTitle>Index</PageTitle>

<TableTemplate @ref="_table" Items="@_clients" Context="client">
    <TableHeader>
        <th>ID</th>
        <th>Protocol</th>
        <th>Username</th>
        <th>User ID</th>
        <th>Tenant ID</th>
        <th>BytesSent</th>
        <th>Bytes Received</th>
    </TableHeader>
    <RowTemplate>
        <td>@client.Id</td>
        <td>@client.ProtocolVersion</td>
        <td>@client.Session.Items["username"]</td>
        <td>@client.Session.Items["user_id"]</td>
        <td>@client.Session.Items["tenant_id"]</td>
        <td>@client.BytesSent</td>
        <td>@client.BytesReceived</td>
    </RowTemplate>
</TableTemplate>

<button class="btn btn-primary" @onclick="e => _sendMessage()">Inject</button>
<p>@_lastMessage</p>

@code {
    private TableTemplate<MqttClientStatus> _table;
    private IList<MqttClientStatus> _clients;
    private string _lastMessage;

    [Inject]
    private MqttServer _server { get; set; }

    [Inject]
    private IPubSubService _pubSub { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await _updateClientListAsync();
        _server.ClientConnectedAsync += async e => { 
            await _updateClientListAsync(); 
        };
        _server.ClientDisconnectedAsync += async e => { 
            await _updateClientListAsync(); 
        };
        _server.ClientAcknowledgedPublishPacketAsync += async e =>
        {
            await _updateClientListAsync();
        };
        _server.InterceptingPublishAsync += async e =>
        {
            await _updateClientListAsync();
        };

        await _pubSub.SubscribeAsync("mqtt/publish", async s => { 
            _lastMessage = s;
            await InvokeAsync(() => { StateHasChanged(); });
        });
    }

    private async Task _updateClientListAsync() 
    {
        _clients = await _server.GetClientsAsync();
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task _sendMessage() {
        var message = new MqttApplicationMessageBuilder()
                         .WithTopic("hello")
                         .WithPayload("my message!")
                         .Build();

        await _server.InjectApplicationMessage(
            new InjectedMqttApplicationMessage(message)
                {
                    SenderClientId = "mqtt-explorer-fb95a991"
                });
    }
}